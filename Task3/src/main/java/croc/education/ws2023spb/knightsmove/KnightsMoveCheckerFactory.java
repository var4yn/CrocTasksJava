package croc.education.ws2023spb.knightsmove;

/**
 * –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–µ—Ç–æ–∫ –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π
 * –¥–æ—Å–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∞ —Ö–æ–¥–æ–º –∫–æ–Ω—è.
 *
 * @author Dmitry Malenok
 */
public final class KnightsMoveCheckerFactory {

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     */
    private KnightsMoveCheckerFactory() {
        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–¥–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–ª—É—á–∞–π–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–ª–∏.
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–µ—Ç–æ–∫ –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∞ —Ö–æ–¥–æ–º
     * –∫–æ–Ω—è.
     *
     * @return –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–µ—Ç–æ–∫ –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∞ —Ö–æ–¥–æ–º –∫–æ–Ω—è
     */
    public static KnightsMoveChecker get() {
        return positions -> {
            for(int i = 1; i < positions.length; i++) {
                // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
                var currentPosition = ChessPositionParser.parse(positions[i]);
                // –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
                var lastPosition = ChessPositionParser.parse(positions[i-1]);

                // —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                int dx = Math.abs(currentPosition.x() - lastPosition.x());
                // —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                int dy = Math.abs(currentPosition.y() - lastPosition.y());

                // (dx == 2 && dy == 1) || (dy == 2 && dx == 1) -> –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥ –∫–æ–Ω—è
                // –Ω–∏–∂–µ –∏–Ω–≤–µ—Ä—Å–∏—è —ç—Ç–æ–≥–æ üëÜ —É—Å–ª–æ–≤–∏—è –¥–ª—è –±—Ä–æ—Å–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥ –∫–æ–Ω—è
                if( (dx != 2 || dy != 1) && (dy != 2 || dx != 1) ) throw new IllegalMoveException(lastPosition, currentPosition);
            }
        };


    }

}
